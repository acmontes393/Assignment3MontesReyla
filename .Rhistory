<<<<<<< Updated upstream
"LA", "MX", "NI", "PA", "PR", "PE", "UY","VE"),
indicator = c("NY.GDP.PCAP.KD.ZG", "1.0.HCount.1.25usd",
"1.0.HCount.2.5usd", "1.0.HCount.Poor4uds",
"1.0.HCount.10usd")
start = 1990, end = 2013, extra = FALSE, cache = NULL)
knitr::opts_chunk$set(echo = FALSE)
library(WDI)
library(RJSONIO)
WDI_indi<- WDI(country = c("AR","BR","BZ", "CL", "CO", "EC", "SL", "GT", "HN",
"LA", "MX", "NI", "PA", "PR", "PE", "UY","VE"),
indicator = c("NY.GDP.PCAP.KD.ZG", "1.0.HCount.1.25usd",
"1.0.HCount.2.5usd", "1.0.HCount.Poor4uds",
"1.0.HCount.10usd"),
start = 1990, end = 2013, extra = FALSE, cache = NULL)
View(WDI_indi)
knitr::opts_chunk$set(echo = FALSE)
library(WDI)
library(RJSONIO)
WDI_indi<- WDI(country = c("AR","BR","BZ", "CL", "CO", "EC", "SL", "GT", "HN",
"LA", "MX", "NI", "PA", "PR", "PE", "UY","VE"),
indicator = c("NY.GDP.PCAP.KD.ZG", "1.0.HCount.1.25usd",
"1.0.HCount.2.5usd", "1.0.HCount.Poor4uds",
"1.0.HCount.10usd"),
start = 1990, end = 2013, extra = FALSE, cache = NULL)
write.table(WDI_indi, file = "WDI_indi", append = FALSE, quote = TRUE, sep = , ,
eol = "\n", na = "NA", dec = ".", row.names = TRUE,
col.names = TRUE, qmethod = c("escape", "double"),
fileEncoding = "")
View(WDI_indi)
View(WDI_indi)
plot(log(WDI_indi$NY.GDP.PCAP.KD.ZG), WDI_indi$1.0.HCount.1.25usd)
knitr::opts_chunk$set(echo = FALSE)
library(WDI)
library(RJSONIO)
WDI_indi<- WDI(country = c("AR","BR","BZ", "CL", "CO", "EC", "SV", "GT", "HN",
"LA", "MX", "NI", "PA", "PR", "PE", "UY","VE"),
indicator = c("NY.GDP.PCAP.KD.ZG", "1.0.HCount.1.25usd",
"1.0.HCount.2.5usd", "1.0.HCount.Poor4uds",
"1.0.HCount.10usd"),
start = 1990, end = 2013, extra = FALSE, cache = NULL)
write.table(WDI_indi, file = "WDI_indi", append = FALSE, quote = TRUE, sep = , ,
eol = "\n", na = "NA", dec = ".", row.names = TRUE,
col.names = TRUE, qmethod = c("escape", "double"),
fileEncoding = "")
WDI_indi$1.0.HCount.1.25usd <-Geadcount.1.25
plot(log(WDI_indi$NY.GDP.PCAP.KD.ZG), WDI_indi$"1.0.HCount.1.25usd")
?plot
plot(WDI_indi$NY.GDP.PCAP.KD.ZG, WDI_indi$"1.0.HCount.1.25usd", xlab = "GDP per capita growth", ylab= "Head count 1.25 us"")
plot(WDI_indi$NY.GDP.PCAP.KD.ZG, WDI_indi$"1.0.HCount.1.25usd", xlab = "GDP per capita growth", ylab= "Head count 1.25 us"")
plot(WDI_indi$NY.GDP.PCAP.KD.ZG, WDI_indi$"1.0.HCount.1.25usd", xlab = "GDP per capita growth", ylab= "Head count 1.25 us")
?ggplot2
plot(WDI_indi$NY.GDP.PCAP.KD.ZG, WDI_indi$"1.0.HCount.1.25usd", xlab = "GDP per capita growth", ylab= "Head count 1.25 us")
ggplot2::ggplot(WDI_indi, aes (NY.GDP.PCAP.KD.ZG, "1.0.HCount.1.25usd"), , xlab = "GDP per capita growth", ylab= "Head count 1.25 us") + geom_point() + geom_smooth() + theme_bw()
plot(WDI_indi$NY.GDP.PCAP.KD.ZG, WDI_indi$"1.0.HCount.1.25usd", xlab = "GDP per capita growth", ylab= "Head count 1.25 us")
ggplot2::ggplot(WDI_indi, aes(NY.GDP.PCAP.KD.ZG, "1.0.HCount.1.25usd")) + geom_point() + geom_smooth() + theme_bw()
knitr::opts_chunk$set(echo = FALSE)
library(WDI)
library(RJSONIO)
library(ggplot2)
WDI_indi<- WDI(country = c("AR","BR","BZ", "CL", "CO", "EC", "SV", "GT", "HN",
"LA", "MX", "NI", "PA", "PR", "PE", "UY","VE"),
indicator = c("NY.GDP.PCAP.KD.ZG", "1.0.HCount.1.25usd",
"1.0.HCount.2.5usd", "1.0.HCount.Poor4uds",
"1.0.HCount.10usd"),
start = 1990, end = 2013, extra = FALSE, cache = NULL)
write.table(WDI_indi, file = "WDI_indi", append = FALSE, quote = TRUE, sep = , ,
eol = "\n", na = "NA", dec = ".", row.names = TRUE,
col.names = TRUE, qmethod = c("escape", "double"),
fileEncoding = "")
WDI_indi$1.0.HCount.1.25usd <-Geadcount.1.25
plot(WDI_indi$NY.GDP.PCAP.KD.ZG, WDI_indi$"1.0.HCount.1.25usd", xlab = "GDP per capita growth", ylab= "Head count 1.25 us")
ggplot2::ggplot(WDI_indi, aes(NY.GDP.PCAP.KD.ZG, "1.0.HCount.1.25usd")) + geom_point() + geom_smooth() + theme_bw()
plot(WDI_indi$NY.GDP.PCAP.KD.ZG, WDI_indi$"1.0.HCount.1.25usd", xlab = "GDP per capita growth", ylab= "Head count 1.25 us")
ggplot2::ggplot(WDI_indi, aes(NY.GDP.PCAP.KD.ZG, "1.0.HCount.1.25usd")) + geom_point() + geom_smooth(x) + theme_bw()
plot(WDI_indi$NY.GDP.PCAP.KD.ZG, WDI_indi$"1.0.HCount.1.25usd", xlab = "GDP per capita growth", ylab= "Head count 1.25 us")
ggplot2::ggplot(WDI_indi, aes(NY.GDP.PCAP.KD.ZG, "1.0.HCount.1.25usd")) + geom_point() + theme_bw()
plot(WDI_indi$NY.GDP.PCAP.KD.ZG, WDI_indi$"1.0.HCount.1.25usd", xlab = "GDP per capita growth", ylab= "Head count 1.25 us")
ggplot2::ggplot(WDI_indi, aes(NY.GDP.PCAP.KD.ZG, "1.0.HCount.1.25usd")) + geom_point() + geom_smooth(x) + theme_bw()
?ggplot2
?ggplot
plot(WDI_indi$NY.GDP.PCAP.KD.ZG, WDI_indi$"1.0.HCount.1.25usd", xlab = "GDP per abline(lm(NY.GDP.PCAP.KD.ZG~"1.0.HCount.1.25usd"), col="red")
plot(WDI_indi$NY.GDP.PCAP.KD.ZG, WDI_indi$"1.0.HCount.1.25usd", xlab = "GDP per abline(lm(NY.GDP.PCAP.KD.ZG~1.0.HCount.1.25usd), col="red")
install.packages(countrycode)
install.packages(countrycode)
install.packages('countrycode')
library(countrycode)
library(countrycode)
?countrycode
View(WDI_indi)
View(WDI_indi)
?is.na
# 2. Loading the default data for the years 2000-2012 from the Worldbank database
wbdata <- c('NY.GDP.MKTP.KD', 'NY.GDP.PCAP.PP.KD', 'SI.POV.GAPS', 'SP.RUR.TOTL.ZS',
'EN.ATM.CO2E.PC', 'EG.ELC.ACCS.ZS', 'SH.XPD.TOTL.ZS', 'SH.H2O.SAFE.ZS',
'SH.STA.ACSN', 'SL.UEM.TOTL.ZS','SL.TLF.0714.WK.ZS', 'SE.PRM.ENRR', 'SH.XPD.PCAP',
'SL.UEM.TOTL.FE.ZS', 'SE.PRM.ENRR.FE', 'SP.HOU.FEMA.ZS', 'SP.DYN.LE00.IN',
'SI.POV.GINI', 'SH.CON.1524.FE.ZS', 'SH.CON.1524.MA.ZS', 'SP.DYN.CONU.ZS',
'SH.IMM.IDPT', 'SH.IMM.MEAS', 'SH.STA.OWGH.ZS', 'SH.PRV.SMOK.FE',
'SH.PRV.SMOK.MA', 'SP.POP.TOTL','SH.MED.BEDS.ZS','SH.STA.BRTC.ZS')
dataset <- WDI(country='all', indicator=wbdata, start=2000, end=2012, extra=TRUE)
# 3. Cleaning the data
## Dropping regional data
dataset <- dataset[dataset$region != "Aggregates", ]
# Dropping rows where all variables are missing
dataset2 <- dataset[which(rowSums(!is.na(dataset[, wbdata])) > 0), ]
# Visualising and counting deleted values
rows.in.a1.that.are.not.in.a2  <- function(dataset,dataset2)
{
dataset.vec <- apply(dataset, 1, paste, collapse = "")
dataset2.vec <- apply(dataset2, 1, paste, collapse = "")
a1.without.a2.rows <- dataset[!dataset.vec %in% dataset2.vec,]
return(a1.without.a2.rows)
}
AllNAs <- rows.in.a1.that.are.not.in.a2(dataset,dataset2)
nrow(AllNAs)
dataset <- dataset2
# Dropping rows where information on variable iso2c is missing
dataset <- dataset[!is.na(dataset$iso2c),] ## No observations were dropped ###
## Ordering the dataset and the years (ascending)
dataset <- group_by(dataset, iso2c)
dataset <- arrange(dataset, iso2c, year)
## Renaming all the variables with simple names
dataset <- plyr::rename(dataset, c("NY.GDP.MKTP.KD" = "GDP"))
dataset <- plyr::rename(dataset, c("NY.GDP.PCAP.PP.KD" = "GDPpc"))
dataset <- plyr::rename(dataset, c("SI.POV.GAPS" = "Poverty"))
dataset <- plyr::rename(dataset, c("SP.RUR.TOTL.ZS" = "Rural"))
dataset <- plyr::rename(dataset, c("EN.ATM.CO2E.PC" = "CO2"))
dataset <- plyr::rename(dataset, c("EG.ELC.ACCS.ZS" = "Electr"))
dataset <- plyr::rename(dataset, c("SH.XPD.TOTL.ZS" = "HCexpend"))
dataset <- plyr::rename(dataset, c("SH.XPD.PCAP" = "HCexpendpc"))
dataset <- plyr::rename(dataset, c("SH.STA.BRTC.ZS" = "Births"))
dataset <- plyr::rename(dataset, c("SH.MED.BEDS.ZS" = "HospBeds"))
dataset <- plyr::rename(dataset, c("SH.H2O.SAFE.ZS" = "Water"))
dataset <- plyr::rename(dataset, c("SH.STA.ACSN" = "Sanitation"))
dataset <- plyr::rename(dataset, c("SL.UEM.TOTL.ZS" = "Unemploym"))
dataset <- plyr::rename(dataset, c("SL.TLF.0714.WK.ZS" = "Childempl"))
dataset <- plyr::rename(dataset, c("SE.PRM.ENRR" = "Primary"))
dataset <- plyr::rename(dataset, c("SL.UEM.TOTL.FE.ZS" = "FemUnempl"))
dataset <- plyr::rename(dataset, c("SE.PRM.ENRR.FE" = "FemSchool"))
dataset <- plyr::rename(dataset, c("SP.HOU.FEMA.ZS" = "FemHead"))
dataset <- plyr::rename(dataset, c("SP.DYN.LE00.IN" = "LifeExpect"))
dataset <- plyr::rename(dataset, c("SI.POV.GINI" = "GINI"))
dataset <- plyr::rename(dataset, c("SH.CON.1524.FE.ZS" = "CondFem"))
dataset <- plyr::rename(dataset, c("SH.CON.1524.MA.ZS" = "CondMale"))
dataset <- plyr::rename(dataset, c("SP.DYN.CONU.ZS" = "Contraceptive"))
dataset <- plyr::rename(dataset, c("SH.IMM.IDPT" = "DPT"))
dataset <- plyr::rename(dataset, c("SH.IMM.MEAS" = "Measles"))
dataset <- plyr::rename(dataset, c("SH.STA.OWGH.ZS" = "Overweight"))
dataset <- plyr::rename(dataset, c("SH.PRV.SMOK.FE" = "SmokeFem"))
dataset <- plyr::rename(dataset, c("SH.PRV.SMOK.MA" = "SmokeMale"))
dataset <- plyr::rename(dataset, c("SP.POP.TOTL" = "Population"))
## Counting NAs in the independent variables
AllNAs$GDPsum <- sum(is.na(dataset$GDP))/nrow(dataset)
AllNAs$GDPpcsum <- sum(is.na(dataset$GDPpc))/nrow(dataset)
AllNAs$Povertysum <- sum(is.na(dataset$Poverty))/nrow(dataset)
AllNAs$Ruralsum <- sum(is.na(dataset$Rural))/nrow(dataset)
AllNAs$CO2sum <- sum(is.na(dataset$CO2))/nrow(dataset)
AllNAs$Electrsum <- sum(is.na(dataset$Electr))/nrow(dataset)
AllNAs$HCexpendsum <- sum(is.na(dataset$HCexpend))/nrow(dataset)
AllNAs$HCexpendpcsum <- sum(is.na(dataset$HCexpendpc))/nrow(dataset)
AllNAs$Birthssum <- sum(is.na(dataset$Births))/nrow(dataset)
AllNAs$Watersum <- sum(is.na(dataset$Water))/nrow(dataset)
AllNAs$Sanitationsum <- sum(is.na(dataset$Sanitation))/nrow(dataset)
AllNAs$Unemploymsum <- sum(is.na(dataset$Unemploym))/nrow(dataset)
AllNAs$Childemplsum <- sum(is.na(dataset$Childempl))/nrow(dataset)
AllNAs$Primarysum <- sum(is.na(dataset$Primary))/nrow(dataset)
AllNAs$FemUnemplsum <- sum(is.na(dataset$FemUnempl))/nrow(dataset)
AllNAs$FemSchoolsum <- sum(is.na(dataset$FemSchool))/nrow(dataset)
AllNAs$FemHeadsum <- sum(is.na(dataset$FemHead))/nrow(dataset)
AllNAs$LifeExpectsum <- sum(is.na(dataset$LifeExpect))/nrow(dataset)
AllNAs$GINIsum <- sum(is.na(dataset$GINI))/nrow(dataset)
AllNAs$CondFemPsum <- sum(is.na(dataset$CondFem))/nrow(dataset)
AllNAs$CondMalesum <- sum(is.na(dataset$CondMale))/nrow(dataset)
AllNAs$Contraceptivesum <- sum(is.na(dataset$Contraceptive))/nrow(dataset)
AllNAs$DPTsum <- sum(is.na(dataset$DPT))/nrow(dataset)
AllNAs$Measlessum <- sum(is.na(dataset$Measles))/nrow(dataset)
AllNAs$Overweightsum <- sum(is.na(dataset$Overweight))/nrow(dataset)
AllNAs$SmokeFemsum <- sum(is.na(dataset$SmokeFem))/nrow(dataset)
AllNAs$SmokeMalesum <- sum(is.na(dataset$SmokeMale))/nrow(dataset)
AllNAs$HospBedssum <- sum(is.na(dataset$HospBeds))/nrow(dataset)
# 1. Loading Required Packages
# install.packages("RJOSONIO")
library(RJSONIO)
# install.packages("WDI")
library(WDI)
# install.packages("dplyr")
library(dplyr)
# install.packages("tidyr")
library(tidyr)
# install.packages("httr")
library(httr)
# install.packages("knitr")
library(knitr)
# install.packages("XML")
library(XML)
#install.packages("plyr")
library(plyr)
# install.packages("Amelia")
library(Amelia)
#install.packages("XLConnect")
library(XLConnect)
# install.packages("countrycode")
library("countrycode")
# install.packages ("ggplot2")
library(ggplot2)
# # install.packages ("magrittr") ???
library(magrittr)
# install.packages ("fmsb")
library(fmsb)
# install.packages ("car")
library(car)
# install.packages("DataCombine")
library(DataCombine)
# install.packages("lmtest")
library(lmtest)
####################################################################################
########################## LOADING AND CLEANING WDI DATA ###########################
####################################################################################
# 2. Loading the default data for the years 2000-2012 from the Worldbank database
wbdata <- c('NY.GDP.MKTP.KD', 'NY.GDP.PCAP.PP.KD', 'SI.POV.GAPS', 'SP.RUR.TOTL.ZS',
'EN.ATM.CO2E.PC', 'EG.ELC.ACCS.ZS', 'SH.XPD.TOTL.ZS', 'SH.H2O.SAFE.ZS',
'SH.STA.ACSN', 'SL.UEM.TOTL.ZS','SL.TLF.0714.WK.ZS', 'SE.PRM.ENRR', 'SH.XPD.PCAP',
'SL.UEM.TOTL.FE.ZS', 'SE.PRM.ENRR.FE', 'SP.HOU.FEMA.ZS', 'SP.DYN.LE00.IN',
'SI.POV.GINI', 'SH.CON.1524.FE.ZS', 'SH.CON.1524.MA.ZS', 'SP.DYN.CONU.ZS',
'SH.IMM.IDPT', 'SH.IMM.MEAS', 'SH.STA.OWGH.ZS', 'SH.PRV.SMOK.FE',
'SH.PRV.SMOK.MA', 'SP.POP.TOTL','SH.MED.BEDS.ZS','SH.STA.BRTC.ZS')
dataset <- WDI(country='all', indicator=wbdata, start=2000, end=2012, extra=TRUE)
# 3. Cleaning the data
## Dropping regional data
dataset <- dataset[dataset$region != "Aggregates", ]
# Dropping rows where all variables are missing
dataset2 <- dataset[which(rowSums(!is.na(dataset[, wbdata])) > 0), ]
# Visualising and counting deleted values
rows.in.a1.that.are.not.in.a2  <- function(dataset,dataset2)
{
dataset.vec <- apply(dataset, 1, paste, collapse = "")
dataset2.vec <- apply(dataset2, 1, paste, collapse = "")
a1.without.a2.rows <- dataset[!dataset.vec %in% dataset2.vec,]
return(a1.without.a2.rows)
}
AllNAs <- rows.in.a1.that.are.not.in.a2(dataset,dataset2)
nrow(AllNAs)
dataset <- dataset2
# Dropping rows where information on variable iso2c is missing
dataset <- dataset[!is.na(dataset$iso2c),] ## No observations were dropped ###
## Ordering the dataset and the years (ascending)
dataset <- group_by(dataset, iso2c)
dataset <- arrange(dataset, iso2c, year)
## Renaming all the variables with simple names
dataset <- plyr::rename(dataset, c("NY.GDP.MKTP.KD" = "GDP"))
dataset <- plyr::rename(dataset, c("NY.GDP.PCAP.PP.KD" = "GDPpc"))
dataset <- plyr::rename(dataset, c("SI.POV.GAPS" = "Poverty"))
dataset <- plyr::rename(dataset, c("SP.RUR.TOTL.ZS" = "Rural"))
dataset <- plyr::rename(dataset, c("EN.ATM.CO2E.PC" = "CO2"))
dataset <- plyr::rename(dataset, c("EG.ELC.ACCS.ZS" = "Electr"))
dataset <- plyr::rename(dataset, c("SH.XPD.TOTL.ZS" = "HCexpend"))
dataset <- plyr::rename(dataset, c("SH.XPD.PCAP" = "HCexpendpc"))
dataset <- plyr::rename(dataset, c("SH.STA.BRTC.ZS" = "Births"))
dataset <- plyr::rename(dataset, c("SH.MED.BEDS.ZS" = "HospBeds"))
dataset <- plyr::rename(dataset, c("SH.H2O.SAFE.ZS" = "Water"))
dataset <- plyr::rename(dataset, c("SH.STA.ACSN" = "Sanitation"))
dataset <- plyr::rename(dataset, c("SL.UEM.TOTL.ZS" = "Unemploym"))
dataset <- plyr::rename(dataset, c("SL.TLF.0714.WK.ZS" = "Childempl"))
dataset <- plyr::rename(dataset, c("SE.PRM.ENRR" = "Primary"))
dataset <- plyr::rename(dataset, c("SL.UEM.TOTL.FE.ZS" = "FemUnempl"))
dataset <- plyr::rename(dataset, c("SE.PRM.ENRR.FE" = "FemSchool"))
dataset <- plyr::rename(dataset, c("SP.HOU.FEMA.ZS" = "FemHead"))
dataset <- plyr::rename(dataset, c("SP.DYN.LE00.IN" = "LifeExpect"))
dataset <- plyr::rename(dataset, c("SI.POV.GINI" = "GINI"))
dataset <- plyr::rename(dataset, c("SH.CON.1524.FE.ZS" = "CondFem"))
dataset <- plyr::rename(dataset, c("SH.CON.1524.MA.ZS" = "CondMale"))
dataset <- plyr::rename(dataset, c("SP.DYN.CONU.ZS" = "Contraceptive"))
dataset <- plyr::rename(dataset, c("SH.IMM.IDPT" = "DPT"))
dataset <- plyr::rename(dataset, c("SH.IMM.MEAS" = "Measles"))
dataset <- plyr::rename(dataset, c("SH.STA.OWGH.ZS" = "Overweight"))
dataset <- plyr::rename(dataset, c("SH.PRV.SMOK.FE" = "SmokeFem"))
dataset <- plyr::rename(dataset, c("SH.PRV.SMOK.MA" = "SmokeMale"))
dataset <- plyr::rename(dataset, c("SP.POP.TOTL" = "Population"))
## Counting NAs in the independent variables
AllNAs$GDPsum <- sum(is.na(dataset$GDP))/nrow(dataset)
AllNAs$GDPpcsum <- sum(is.na(dataset$GDPpc))/nrow(dataset)
AllNAs$Povertysum <- sum(is.na(dataset$Poverty))/nrow(dataset)
AllNAs$Ruralsum <- sum(is.na(dataset$Rural))/nrow(dataset)
AllNAs$CO2sum <- sum(is.na(dataset$CO2))/nrow(dataset)
AllNAs$Electrsum <- sum(is.na(dataset$Electr))/nrow(dataset)
AllNAs$HCexpendsum <- sum(is.na(dataset$HCexpend))/nrow(dataset)
AllNAs$HCexpendpcsum <- sum(is.na(dataset$HCexpendpc))/nrow(dataset)
AllNAs$Birthssum <- sum(is.na(dataset$Births))/nrow(dataset)
AllNAs$Watersum <- sum(is.na(dataset$Water))/nrow(dataset)
AllNAs$Sanitationsum <- sum(is.na(dataset$Sanitation))/nrow(dataset)
AllNAs$Unemploymsum <- sum(is.na(dataset$Unemploym))/nrow(dataset)
AllNAs$Childemplsum <- sum(is.na(dataset$Childempl))/nrow(dataset)
AllNAs$Primarysum <- sum(is.na(dataset$Primary))/nrow(dataset)
AllNAs$FemUnemplsum <- sum(is.na(dataset$FemUnempl))/nrow(dataset)
AllNAs$FemSchoolsum <- sum(is.na(dataset$FemSchool))/nrow(dataset)
AllNAs$FemHeadsum <- sum(is.na(dataset$FemHead))/nrow(dataset)
AllNAs$LifeExpectsum <- sum(is.na(dataset$LifeExpect))/nrow(dataset)
AllNAs$GINIsum <- sum(is.na(dataset$GINI))/nrow(dataset)
AllNAs$CondFemPsum <- sum(is.na(dataset$CondFem))/nrow(dataset)
AllNAs$CondMalesum <- sum(is.na(dataset$CondMale))/nrow(dataset)
AllNAs$Contraceptivesum <- sum(is.na(dataset$Contraceptive))/nrow(dataset)
AllNAs$DPTsum <- sum(is.na(dataset$DPT))/nrow(dataset)
AllNAs$Measlessum <- sum(is.na(dataset$Measles))/nrow(dataset)
AllNAs$Overweightsum <- sum(is.na(dataset$Overweight))/nrow(dataset)
AllNAs$SmokeFemsum <- sum(is.na(dataset$SmokeFem))/nrow(dataset)
AllNAs$SmokeMalesum <- sum(is.na(dataset$SmokeMale))/nrow(dataset)
AllNAs$HospBedssum <- sum(is.na(dataset$HospBeds))/nrow(dataset)
# Clearing the workspace
rm(list = ls())
# 1. Installing and loading packages
=======
install.packages('ggplot2')
library(ggplot2)
install.packages('ggplot2')
library(ggplot2)
install.packages('Rcpp')
library(ggplot2)
ggplot(mtcars, aes(hp, mpg)) + geom_point()
install.packages('dplyr')
library(dplyr)
Ra# History files
.Rhistory
# Example code in package build process
*-Ex.R
# R data files from past sessions
.Rdata
# RMarkdown files
*_cache/
*_files/
# Other
LectureSlides/Lecture10/ggmapTemp.png
data("EuStockMarkets")
?crimtab
names("crimtab")
names(crimtab)
require(stats)
require(grDevices); require(graphics)
hist(x = zobs, probability = TRUE, xlab = "Student's z",
col = grey(0.8), border = grey(0.5),
main = "Distribution of Student's z score  for 'crimtab' data")
d.hei$sample <- as.factor(rep(1:750, each = 4))
## Repeat Student's experiment:
# 1) Reconstitute 3000 raw data for heights in inches and rounded to
#    nearest integer as in Student's paper:
(heIn <- round(as.numeric(colnames(crimtab)) / 2.54))
d.hei <- data.frame(height = rep(heIn, colSums(crimtab)))
View(d.hei)
View(d.hei)
View(d.hei)
require(stats)
dim(crimtab)
utils::str(crimtab)
## for nicer printing:
local({cT <- crimtab
colnames(cT) <- substring(colnames(cT), 2, 3)
print(cT, zero.print = " ")
})
require(grDevices); require(graphics)
hist(x = zobs, probability = TRUE, xlab = "Student's z",
col = grey(0.8), border = grey(0.5),
main = "Distribution of Student's z score  for 'crimtab' data")
zobs[infZ <- is.infinite(zobs)] # 3 of them
zobs[infZ] <- 6 * sign(zobs[infZ])
zobs <- (h.mean - mean(d.hei[,"height"]))/h.sd
h.mean <- with(d.hei, tapply(height, sample, FUN = mean))
h.sd   <- with(d.hei, tapply(height, sample, FUN = sd)) * sqrt(3/4)
zobs <- (h.mean - mean(d.hei[,"height"]))/h.sd
d.hei$sample <- as.factor(rep(1:750, each = 4))
d.hei <- data.frame(height = rep(heIn, colSums(crimtab)))
d.hei$sample <- as.factor(rep(1:750, each = 4))
zobs <- (h.mean - mean(d.hei[,"height"]))/h.sd
h.mean <- with(d.hei, tapply(height, sample, FUN = mean))
zobs <- (h.mean - mean(d.hei[,"height"]))/h.sd
zobs[infZ <- is.infinite(zobs)] # 3 of them
zobs[infZ] <- 6 * sign(zobs[infZ])
hist(x = zobs, probability = TRUE, xlab = "Student's z",
col = grey(0.8), border = grey(0.5),
main = "Distribution of Student's z score  for 'crimtab' data")
plot d.hei
plot("d.hei")
View(d.hei)
data("HairEyeColor")
name("HairEyeColor")
summary
names(HairEyeColor)
?HairEyeColor
require(graphics)
## Full mosaic
mosaicplot(HairEyeColor)
## Aggregate over sex (as in Snee's original data)
x <- apply(HairEyeColor, c(1, 2), sum)
x
mosaicplot(x, main = "Relation between hair and eye color")
View(x)
data("Seatbelts")
data("Seatbelts")
?(Seatbelts)
?Seatbelts
URL <- http://www.bbc.com/sport/winter-olympics/2014/medals/countries/
URL <- 'http://www.bbc.com/sport/winter-olympics/2014/medals/countries/'
View(x)
View(d.hei)
library(httr)
library(dplyr)
library(XML)
URL <- 'http://www.bbc.com/sport/winter-olympics/2014/medals/countries/'
View(x)
View(d.hei)
URL <- 'http://www.bbc.com/sport/winter-olympics/2014/medals/countries'
tables <- URL %>% GET() %>%
content(as = 'parsed') %>%
readHTMLTable()
names(tables)
tables <- URL %>% GET() %>%
content(as = 'parsed') %>%
readHTMLTable()
MedalsTable <- tables[[1]]
tables <- URL %>% GET() %>%
content(as = 'parsed') %>%
readHTMLTable()
names(tables)
name(tables)
tables <- URL %>% GET() %>%
content(as = 'parsed') %>%
readHTMLTable()
name(tables)
MedalsTable <- tables[[1]]
URL <- 'http://www.bbc.com/sport/winter-olympics/2014/medals/countries'
tables <- URL %>% GET() %>%
content(as = 'parsed') %>%
readHTMLTable()
name(tables)
MedalsTable <- tables[[1]]
library(httr)
library(dplyr)
library(XML)
URL <- 'http://www.bbc.com/sport/winter-olympics/2014/medals/countries'
tables <- URL %>% GET() %>%
content(as = 'parsed') %>%
readHTMLTable()
name(tables)
MedalsTable <- tables[[1]]
names(tables)
library(httr)
install.packages('httr')
install.packages("dplyr")
install.packages("XML")
install.packages("dplyr")
library(httr)
library(dplyr)
library(XML)
URL <- 'http://www.bbc.com/sport/winter-olympics/2014/medals/countries'
tables <- URL %>% GET() %>%
content(as = 'parsed') %>%
readHTMLTable()
names(tables)
MedalsTable <- tables[[1]]
View(x)
View(MedalsTable)
View(x)
View(x)
library(httr)
library(dplyr)
library(XML)
URL <- 'http://www.bbc.com/sport/winter-olympics/2014/medals/countries'
tables <- URL %>% GET() %>%
content(as = 'parsed') %>%
readHTMLTable()
names(tables)
MedalsTable <- tables[[1]]
View(MedalsTable)
head(MedalsTable)[, 1:3]
head(MedalsTable)[, 1:6]
View(MedalsTable)
`names<-`(V1, Country)
names()[V1] <- "Countries"
names(x)[V1] <- "Countries"
names(x)[1] <- "Countries"
names(z)[1] <- "countries"
head(MedalsTable)[, 1:6]
names(MedalsTable)[1] <- "countries"
names(MedalsTable)[2] <- "Countries"
names(MedalsTable)[3] <- "Gold"
names(MedalsTable)[4] <- "Silver"
names(MedalsTable)[5] <- "Bronze"
names(MedalsTable)[6] <- "Total"
names(MedalsTable)[1] <- "Ranking"
MedalsTable <-seclect(MedalsTable, .-NULL.V1, NULL.-V7)
MedalsTable <-seclect(MedalsTable, .-NULL.V1, NULL.-V7)
MedalsTable <- select(MedalsTable, .-NULL.V1, NULL.-V7)
MedalsTable <- select(MedalsTable, .-NULL.V1, NULL-V7)
MedalsTable <- select(MedalsTable, .-V1, .V7)
MedalsTable <- select(MedalsTable, V1, V7)
MedalsTable <- select(MedalsTable, -V1, -V7)
MedalsTable <- select(MedalsTable, -V7)
MedalsTable <- select(MedalsTable, -V1)
MedalsTable$Countries <- as.character(MedalsTable$Countries)
library(car)
data(Prestige)
install.packages("car")
data(Prestige)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(WDI-package)
library(Zelig)
library(WDI.date)
library(WDI.data)
library(WDI)
library(devtools)
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
# Find working directory
getwd()
# Set root as working directory
setwd('/')
# Load libraries
library(httr)
library(dplyr)
library(xlsx)
library(rio)
library(stargazer)
library(Zelig)
library(repmis)
library(tidyr)
# Loading dataset of Control of Corruption - the World Bank
URL <- "http://info.worldbank.org/governance/wgi/index.aspx?fileName=wgidataset.xlsx"
temp <- tempfile()
download.file(URL, temp, mode='wb')
controlc <- read.xlsx2(temp, 7, sheetName = NULL, startRow = 14, endRow = 230, colIndex = NULL, as.data.frame = TRUE, header = FALSE)
unlink(temp)
# Cleaning the data
# Changing the order of rows 1 and 2
controlc <- rbind(controlc[c(2,1),], controlc[-c(1,2),])
row.names(controlc) <- NULL
# Setting the new row 1 as header
names(controlc) = as.character(unlist(controlc[1,]))
controlc = controlc[-1,]
row.names(controlc) <- NULL
# Setting the years as an observation
cc <- gather(controlc, Country/Territory, WBCode, Estimate, StdErr, NumSrc, Rank, Lower, Upper, 1996:2014)
names(controlc) <- c("Country", "WBCode", "Estimate", "Std. Error", "NumSrc", "Rank", "Lower", "Upper")
# World Bank Dataset
data("XXXXXX")
# To see the name of variables
names("XXXXXXXXXX")
# Histogram
hist(xxx$yyyyy)
# Mean
mean(XXX$yyyy)
#boxplot
boxplot(swiss$Examination, main = 'blah')
?Wages
summary(Wages)
M1 <- lm(lwage ~ ed, data = Wages)
M2 <- lm(lwage ~ ed + exp, data = Wages)
summary(M1)
confint(M1)
labels <- c('')
stargazer::stargazer(M1, M2, title='OLS regression of the Percentage of Wages Variation', type= 'html', digits=2, header = FALSE)
###Panel Data###
ts(data = Wages, start = (1976), end = (1982), frequency = 4165,
deltat = 1, ts.eps = getOption("ts.eps"), class = , names = )
M3 <- plm(lwage ~ exp, data = Wages)
summary(M1)
confint(M1)
# Collaborative Data Analysis Project
# Installing and loading packages
>>>>>>> Stashed changes
install.packages('WDI')
install.packages('tidyr')
install.packages('rio')
install.packages('countrycode')
<<<<<<< Updated upstream
install.packages("RJOSONIO")
install.packages ("ggplot2")
install.packages("rworldmap")
install.packages("sp")
library("ggmap")
library(maptools)
library(?world)
=======
>>>>>>> Stashed changes
library(countrycode)
library(WDI)
library(tidyr)
library(rio)
<<<<<<< Updated upstream
library(RJSONIO)
library(ggplot2)
library(rworldmap)
library(sp)
#2. Setting directory
setwd('/Users/AnaCe/Desktop/Assignment3MontesReyla')
#setwd('/Users/ayrarowenareyla/Desktop/The Hertie School of Governance/Collaborative Social Sciences/Assignment3MontesReyla/Assignment3MontesReyla')
# 3. Load and data cleaning
# Migration UN Data: loop that loads into R each table
# in the file and extracts the relevant information for this assigment
tables <-c(2, 5, 8, 11)
for (i in tables)   {
Migration<- import("UN_MigrantStockByOriginAndDestination_2013T10.xls",
format = "xls", sheet =i)
=======
#Setting directory
#setwd('/Users/AnaCe/Dropbox/Hertie/CollaborativeDataAnalysis/R/Assignment3MontesReyla')
setwd('/Users/ayrarowenareyla/Desktop/The Hertie School of Governance/Collaborative Social Sciences/Assignment3MontesReyla/Assignment3MontesReyla')
# 1. Load and data cleaning
# Migration UN Data: loop
tables <-c(2, 5, 8, 11)
for (i in tables)
{
Migration<- import("UN_MigrantStockByOriginAndDestination_2013T10.xls", format = "xls", sheet =i)
>>>>>>> Stashed changes
emigration<- Migration[c(15,16),]
emigration<- t(emigration)
emigration<-as.data.frame(emigration)
emigration<- emigration[c(10:241),]
colnames(emigration) <- c("Country","Emigration")
assign(paste0("emigration", i), emigration)
}
emigrationtotal <- cbind(emigration11, emigration8, emigration5, emigration2)
emigrationtotal <-emigrationtotal[,c(1,2, 4, 6,  8)]
emigrationtotal <- gather(emigrationtotal, year, emigration, 2:5)
emigrationtotal$year <- as.character(emigrationtotal$year)
emigrationtotal$year[emigrationtotal$year=="Emigration"] <- "2013"
emigrationtotal$year[emigrationtotal$year=="Emigration.1"] <- "2010"
emigrationtotal$year[emigrationtotal$year=="Emigration.2"] <- "2000"
emigrationtotal$year[emigrationtotal$year=="Emigration.3"] <- "1990"
ls()
rm(list = c("emigration","emigration11", "emigration2", "emigration5", "emigration8",
"i", "tables"))
# 2. Loading the default data for the years 2000-2012 from the Worldbank database
wbdata <- c ("IT.CEL.SETS.P2", "IT.NET.USER.P2", "NY.GDP.PCAP.PP.CD","SP.POP.TOTL","SI.POV.DDAY","SL.UEM.TOTL.ZS","VC.IHR.PSRC.P5"
,"CC.EST","GE.EST","PV.EST","RQ.EST","RL.EST","VA.EST","SP.DYN.TFRT.IN")
<<<<<<< Updated upstream
WDI_indi<- WDI(country = "all", indicator = wbdata,
start = 1990, end = 2013, extra = FALSE, cache = NULL)
# 3. Creating an unique identifier for both data frames
emigrationtotal$iso2c <- countrycode (emigrationtotal$Country, origin = 'country.name',
destination = 'iso2c', warn = TRUE)
WDI_indi$iso2c <- countrycode (WDI_indi$country, origin = 'country.name',
destination = 'iso2c', warn = TRUE)
# 4. Merging "WDI Indicators " and "UN Migration stocks"
Merged <- merge(emigrationtotal, WDI_indi, by = c('iso2c','year'))
summary(Merged)
# 5. Renaming all the variables with simple names
=======
# WDI
WDI_indi<- WDI(country = "all", indicator = wbdata,
start = 1990, end = 2013, extra = FALSE, cache = NULL)
emigrationtotal$iso2c <- countrycode (emigrationtotal$Country, origin = 'country.name', destination = 'iso2c', warn = TRUE)
WDI_indi$iso2c <- countrycode (WDI_indi$country, origin = 'country.name', destination = 'iso2c', warn = TRUE)
# 3. Merging "WDI Indicators " and "Migration"
Merged <- merge(emigrationtotal, WDI_indi, by = c('iso2c','year'))
summary(Merged)
#4 Renaming all the variables with simple names
>>>>>>> Stashed changes
Merged <- plyr::rename(Merged, c("IT.CEL.SETS.P2" = "CellphoneUsers"))
Merged <- plyr::rename(Merged, c("IT.NET.USER.P2" = "InternetUsers"))
Merged <- plyr::rename(Merged, c("NY.GDP.PCAP.PP.CD" = "GDPPerCapita"))
Merged <- plyr::rename(Merged, c("SP.POP.TOTL" = "TotalPopulation"))
Merged <- plyr::rename(Merged, c("SI.POV.DDAY" = "Poverty"))
Merged <- plyr::rename(Merged, c("SL.UEM.TOTL.ZS" = "UnemploymentRate"))
Merged <- plyr::rename(Merged, c("VC.IHR.PSRC.P5" = "IntentionalHomocides"))
Merged <- plyr::rename(Merged, c("CC.EST" = "Corruption"))
Merged <- plyr::rename(Merged, c("GE.EST" = "GovernmentEffectiveness"))
Merged <- plyr::rename(Merged, c("PV.EST" = "PoliticalStability"))
Merged <- plyr::rename(Merged, c("RQ.EST" = "RegulatoryQuality"))
Merged <- plyr::rename(Merged, c("RL.EST" = "RuleOfLaw"))
Merged <- plyr::rename(Merged, c("VA.EST" = " VoiceAndAccountability"))
Merged <- plyr::rename(Merged, c("SP.DYN.TFRT.IN" = "FertilityRate"))
<<<<<<< Updated upstream
# 6. Counting NAs in the Independent Variables
variables <-c("CellphoneUsers", "InternetUsers", "GDPPerCapita", "TotalPopulation", "Poverty", "UnemploymentRate", "IntentionalHomocides",
"Corruption", "GovernmentEffectivness", "PoliticalStability", "RegulatoryStability", "RegulatoryQuality", "RuleOfLaw",
"VoiceAndAccountability", "FertilityRate")
NAs<- sum(is.na(Merged$CellphoneUsers))/nrow(Merged)
NAs$Poverty<- sum(is.na(Merged$Poverty))/nrow(Merged)
NAs$InternetUsers<- sum(is.na(Merged$InternetUsers))/nrow(Merged)
NAs$GDPPerCapita<- sum(is.na(Merged$GDPPerCapita))/nrow(Merged)
NAs$TotalPopulation<- sum(is.na(Merged$TotalPopulation))/nrow(Merged)
NAs$Corruption<- sum(is.na(Merged$Corruption))/nrow(Merged)
NAs$IntentionalHomocides<- sum(is.na(Merged$IntentionalHomocides))/nrow(Merged)
NAs$TotalPopulation<- sum(is.na(Merged$TotalPopulation))/nrow(Merged)
NAs$GovernmentEffectivness<- sum(is.na(Merged$GovernmentEffectivness))/nrow(Merged)
NAs$PoliticalStability<- sum(is.na(Merged$PoliticalStability))/nrow(Merged)
NAs$RegulatoryStability<- sum(is.na(Merged$RegulatoryStability))/nrow(Merged)
NAs$VoiceAndAccountability<- sum(is.na(Merged$VoiceAndAccountability))/nrow(Merged)
NAs$FertilityRate<- sum(is.na(Merged$FertilityRate))/nrow(Merged)
# After looking at the number of missing variables in the Merged data frame.
# Also, we are dropping independent variables with more than 15% of the total observations NA
Merged <- Merged[, !(colnames(Merged)) %in% c("Poverty", "PoliticalStability","Corruption", "IntentionalHomocides")]
# Variables as numeric
str(Merged)
# Code variables as numeric
Merged$year <- as.numeric(Merged$year)
Merged$emigration <- as.numeric(Merged$emigration)
str(Merged)
?str
hist(Merged$emigrationpercap, xlab = "Number of emigrants per 1000 people", main = "Histogram")
mean(Merged$emigrationpercap, na.rm = TRUE)
# Code variables as numeric
Merged$year <- as.numeric(Merged$year)
Merged$emigration <- as.numeric(Merged$emigration)
# Generating variables
Merged$emigrationpercap = Merged$emigration/Merged$TotalPopulation*1000
Merged$lnemigrationpercap =log(Merged$emigrationpercap)
mean(Merged$emigrationpercap, na.rm = TRUE)
hist(Merged$emigrationpercap, xlab = "Number of emigrants per 1000 people", main = "Histogram")
hist(Merged$emigration, xlab = "Number of emigrants", main = "Histogram")
?hist
Merged$emigration2 = Merged$emigration/1000
hist(Merged$emigration2, xlab = "Tousands of emigrants", main = "Histogram")
summary(Merged$emigration2)
summary(Merged$emigration2, na.rm = TRUE)
descriptive_table <- function(data){
funlist <- list(mean,quantile,IQR,sd,max,min,median)
temp <- cbind(c("mean","quantile","IQR","sd","max","min","median"), lapply(funlist, function(fn) fn(data)))
colnames(temp) <- c("Statistic", "Value")
descriptives <- rbind(temp, c("range",max(data)-min(data)),
c("Pearson Mode Skewness", (mean(data)- median(data)/sd(data))) )
print(descriptives)
}
View(descriptive_table)
View(descriptive_table)
descriptive descriptive_table(Merged$emigration2)
descriptive_table(Merged$emigration2)
NAs<- sum(is.na(Merged$CellphoneUsers))/nrow(Merged)
NAs$InternetUsers<- sum(is.na(Merged$InternetUsers))/nrow(Merged)
NAs$GDPPerCapita<- sum(is.na(Merged$GDPPerCapita))/nrow(Merged)
NAs$TotalPopulation<- sum(is.na(Merged$TotalPopulation))/nrow(Merged)
NAs$Poverty<- sum(is.na(Merged$Poverty))/nrow(Merged)
NAs$UnemploymentRate<- sum(is.na(Merged$UnemploymentRate))/nrow(Merged)
NAs$Corruption<- sum(is.na(Merged$Corruption))/nrow(Merged)
NAs$IntentionalHomocides<- sum(is.na(Merged$IntentionalHomocides))/nrow(Merged)
NAs$GovernmentEffectivness<- sum(is.na(Merged$GovernmentEffectivness))/nrow(Merged)
NAs$PoliticalStability<- sum(is.na(Merged$PoliticalStability))/nrow(Merged)
NAs$RegulatoryStability<- sum(is.na(Merged$RegulatoryStability))/nrow(Merged)
NAs$VoiceAndAccountability<- sum(is.na(Merged$VoiceAndAccountability))/nrow(Merged)
NAs$FertilityRate<- sum(is.na(Merged$FertilityRate))/nrow(Merged)
View(Merged)
View(Merged)
Merged <- merge(emigrationtotal, WDI_indi, by = c('iso2c','year'))
summary(Merged)
# 5. Renaming all the variables with simple names
Merged <- plyr::rename(Merged, c("IT.CEL.SETS.P2" = "CellphoneUsers"))
Merged <- plyr::rename(Merged, c("IT.NET.USER.P2" = "InternetUsers"))
Merged <- plyr::rename(Merged, c("NY.GDP.PCAP.PP.CD" = "GDPPerCapita"))
Merged <- plyr::rename(Merged, c("SP.POP.TOTL" = "TotalPopulation"))
Merged <- plyr::rename(Merged, c("SI.POV.DDAY" = "Poverty"))
Merged <- plyr::rename(Merged, c("SL.UEM.TOTL.ZS" = "UnemploymentRate"))
Merged <- plyr::rename(Merged, c("VC.IHR.PSRC.P5" = "IntentionalHomocides"))
Merged <- plyr::rename(Merged, c("CC.EST" = "Corruption"))
Merged <- plyr::rename(Merged, c("GE.EST" = "GovernmentEffectiveness"))
Merged <- plyr::rename(Merged, c("PV.EST" = "PoliticalStability"))
Merged <- plyr::rename(Merged, c("RQ.EST" = "RegulatoryQuality"))
Merged <- plyr::rename(Merged, c("RL.EST" = "RuleOfLaw"))
Merged <- plyr::rename(Merged, c("VA.EST" = " VoiceAndAccountability"))
Merged <- plyr::rename(Merged, c("SP.DYN.TFRT.IN" = "FertilityRate"))
# 6. Counting NAs in the Independent Variables
variables <-c("CellphoneUsers", "InternetUsers", "GDPPerCapita", "TotalPopulation", "Poverty",
"UnemploymentRate", "IntentionalHomocides", "Corruption", "FertilityRate",
"GovernmentEffectivness", "PoliticalStability", "RegulatoryStability",
"RegulatoryQuality", "RuleOfLaw", "VoiceAndAccountability")
NAs<- sum(is.na(Merged$CellphoneUsers))/nrow(Merged)
NAs$InternetUsers<- sum(is.na(Merged$InternetUsers))/nrow(Merged)
NAs$GDPPerCapita<- sum(is.na(Merged$GDPPerCapita))/nrow(Merged)
NAs$TotalPopulation<- sum(is.na(Merged$TotalPopulation))/nrow(Merged)
NAs$Poverty<- sum(is.na(Merged$Poverty))/nrow(Merged)
NAs$UnemploymentRate<- sum(is.na(Merged$UnemploymentRate))/nrow(Merged)
NAs$Corruption<- sum(is.na(Merged$Corruption))/nrow(Merged)
NAs$IntentionalHomocides<- sum(is.na(Merged$IntentionalHomocides))/nrow(Merged)
NAs$GovernmentEffectivness<- sum(is.na(Merged$GovernmentEffectivness))/nrow(Merged)
NAs$PoliticalStability<- sum(is.na(Merged$PoliticalStability))/nrow(Merged)
NAs$RegulatoryStability<- sum(is.na(Merged$RegulatoryStability))/nrow(Merged)
NAs$VoiceAndAccountability<- sum(is.na(Merged$VoiceAndAccountability))/nrow(Merged)
NAs$FertilityRate<- sum(is.na(Merged$FertilityRate))/nrow(Merged)
for (i in variables) {
summary(Merged$I, na.rm = TRUE)
}
for (i in variables) {
summary(Merged$i, na.rm = TRUE)
}
plot(emigration2 ~ CellphoneUsers, data = Merged,
xlab = "E", las = 1,
ylab = "C",
main = "Emigration data and fitted curve")
summary(Merged$emigration2, na.rm = TRUE)
summary(Merged$CellphoneUsers, na.rm = TRUE)
summary(Merged$InternetUsers, na.rm = TRUE)
summary(Merged$GDPPerCapita, na.rm = TRUE)
summary(Merged$TotalPopulation, na.rm = TRUE)
summary(Merged$FertilityRate, na.rm = TRUE)
summary(Merged$GovernmentEffectivness, na.rm = TRUE)
summary(Merged$RegulatoryStability, na.rm = TRUE)
summary(Merged$RegulatoryQuality, na.rm = TRUE)
summary(Merged$RuleOfLaw, na.rm = TRUE)
summary(Merged$VoiceAndAccountability, na.rm = TRUE)
str(Merged)
=======
#Counting NAs in the Independent Variables
variables <-c("CellphoneUsers", "InternetUsers", "GDPPerCapita", "TotalPopulation", "Poverty", "UnemploymentRate", "IntentionalHomocides",
"Corruption", "GovernmentEffectivness", "PoliticalStability", "RegulatoryStability", "RegulatoryQuality", "RuleOfLaw",
"VoiceAndAccountability", "FertilityRate")
for (i in variables)
{
NAs <- sum(is.na(Merged$variables))
assign(paste0("sum", i), sum)
}
NAs <- NAs[,-c(1:20)]
NAs <- AllNAs[!duplicated(AllNAs), ]
TNAs <- t(NAs)
table(TNAs)
# MAPS
library(sp)
getClass("Spatial")
library(spatstat)
library(spdep)
library(RColorBrewer)
library(classInt)
View(TNAs)
View(Merged)
View(Merged)
for (i in variables)
{
NAs <- sum(is.na(Merged$variables))
assign(paste0("sum", i), sum)
}
NAs <- NAs[,-c(19:1149)]
NAs <- AllNAs[!duplicated(AllNAs), ]
TNAs <- t(NAs)
table(TNAs)
View(TNAs)
View(TNAs)
>>>>>>> Stashed changes
